plugins {
    id "checkstyle"
    id "io.spring.javaformat" version "$javaFormatVersion"
    id "java"
    id "org.springframework.boot" version "3.4.4"
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    toolVersion = "10.13.0"
}

def integrationTest = sourceSets.create("integrationTest") {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
}

configurations {
    checkstyle {
        resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
            select("com.google.guava:guava:0")
        }
    }
    integrationTestImplementation {
        extendsFrom(testImplementation)
    }
    integrationTestRuntimeOnly {
        extendsFrom(testRuntimeOnly)
    }
}

dependencies {
    checkstyle("com.puppycrawl.tools:checkstyle:${checkstyle.toolVersion}")
    checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")

    implementation(platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES))

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    testImplementation("org.springframework.boot:spring-boot-starter-test")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.named("jar") {
    enabled = false;
}

tasks.named("bootJar") {
    archiveVersion = ""
}

tasks.register('integrationTest', Test) {
    description = "Runs integration tests"
    group = "verification"
    testClassesDirs = integrationTest.output.classesDirs
    classpath = integrationTest.runtimeClasspath
    shouldRunAfter(tasks.named('test'))
}

tasks.named("check") {
    dependsOn(tasks.named("integrationTest"))
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ["-parameters", "-Xlint:all"]
}
